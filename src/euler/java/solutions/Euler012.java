package euler.java.solutions;

import euler.java.main.Utility;

/**
 * Problem 12: Highly divisible triangular number
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Euler012 implements EulerProblem {

    private static final int DIVISORS = 500;

    /**
     * First, use standard brute force algorithm to acquire the first 500 prime numbers. This is
     * an extremely pessimistic upper bound for the number of prime numbers needed because the answer is,
     * at worst, the product of the first five hundred primes. This upper bound can likely be refined.
     * <p>
     * The nth triangle number can be generated by the expression n(n+1)/2. Sequentially generate each
     * triangle number, and find its number of divisors by using the method outlined in numberOfDivisors()
     *
     * @return solution to Problem 12
     */
    public String solve() {
        int[] primes = Utility.getPrimeArray(DIVISORS);

        int current = 5, triangleNum = current * (current + 1) / 2;
        while (numberOfDivisors(triangleNum, primes) <= DIVISORS) {
            triangleNum += ++current;
        }

        return triangleNum + "";
    }

    /**
     * Finds the number of divisors of the parameter by finding prime factors. A number's divisors
     * can be found by multiplying the frequency + 1 of all of its prime factors together. Uses brute-force check.
     * Upper bound of the prime facotrs to check is number/2, since beyond that point either the number would
     * already have been factored by 2, or the number is prime. Returns 1 if the number is prime.
     *
     * @param number
     * @return number of prime factors in number
     */
    private int numberOfDivisors(int number, int[] primes) {
        int current = number, numberOfDivisors = 1, primeFactorFreq = 0, limit = number / 2;
        for (int i = 0; i < primes.length; i++) {
            if (primes[i] > limit) {
                break;
            }
            primeFactorFreq = 1;
            while (current % primes[i] == 0) {
                primeFactorFreq++;
                current /= primes[i];
            }
            if (primeFactorFreq > 1) {
                numberOfDivisors *= primeFactorFreq;
            }
        }
        return numberOfDivisors;
    }
}
