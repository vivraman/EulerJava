package euler.java.solutions;

import java.util.*;

/**
 * Problem 27: Quadratic primes
 * Euler discovered the remarkable quadratic formula: n^2 + n + 41. It turns out that the formula will produce 40
 * primes for the consecutive integer values 0 ≤ n ≤ 39.
 * <p>
 * The incredible formula n^2 − 79n + 1601 was discovered, which produces 80 primes for the consecutive values
 * 0 ≤ n ≤ 79. The product of the coefficients, −79 and 1601, is −126479.
 * <p>
 * Considering quadratics of the form: n^2 + an + b, where |a| < 1000 and |b| ≤ 1000, find the product of
 * the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for
 * consecutive values of n, starting with n=0.
 */
public class Euler027 extends EulerProblem {

    private static final int PRIME_LIMIT = 10000;
    Hashtable<Integer, Integer> primes;
    ArrayList<Integer> primelist;

    /**
     * Generate an initial list of primes up to an arbitrary number, in this case, 10000. Then, for each possible
     * value of a and b, brute force iterate through each quadratic and find the max number of consecutive primes
     * found. Use hash table for prime list for quick lookup.
     *
     * @return solution to Problem 27
     */
    @Override
    protected String solve() {
        primes = new Hashtable<>();
        primelist = new ArrayList<>();
        primes.put(2, 1);
        primelist.add(2);
        for (int i = 3; i <= PRIME_LIMIT; i += 2) {
            boolean isPrime = true;
            int limit = (int) (Math.sqrt(i));
            for (int j = 0; primelist.get(j) <= limit && j < primelist.size(); j++) {
                if (i % primelist.get(j) == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                primes.put(i, 1);
                primelist.add(i);
            }
        }
        int maxPrimeCount = 0, product = 0;
        for (int a = -1000; a < 1001; a++) {
            int b = 0;
            for (int test = 0; (b = primelist.get(test)) < 1000; test++) {
                int consecPrimeCount;
                if ((consecPrimeCount = consecPrimes(a, b)) > maxPrimeCount) {
                    maxPrimeCount = consecPrimeCount;
                    product = a * b;
                }
            }
        }
        return product + "";
    }

    /**
     * Returns the total number of consecutive primes generated by the quadratic expression n^2 + an + b
     *
     * @param a coefficient a for the quadratic expression
     * @param b coefficient b for the quadratic expression
     * @return number of consecutive primes generated by the quadratic expression
     */
    private int consecPrimes(int a, int b) {
        for (int i = 0; ; i++) {
            if (!primes.containsKey(i * i + a * i + b)) {
                return i;
            }
        }
    }
}
