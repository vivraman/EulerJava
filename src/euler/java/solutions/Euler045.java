package euler.java.solutions;

import euler.java.main.Utility;

import java.util.HashSet;

/**
 * Problem 45: Triangular, pentagonal, and hexagonal
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 * Triangle	 	    T_n = n(n+1) / 2	1, 3, 6, 10, 15, ...
 * Pentagonal	 	P_n = n(3n−1) / 2	1, 5, 12, 22, 35, ...
 * Hexagonal	 	H_n = n(2n−1)	 	1, 6, 15, 28, 45, ...
 *
 * It can be verified that T_285 = P_165 = H_143 = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */
public class Euler045 implements EulerProblem {

    public static final int INVALID_ANSWER = 40755;

    /**
     * Brute-force solution. From n = 1 onwards, continuously generate triangle, pentagonal, and hexagonal numbers
     * for values of n. Since exagonal numbers increase at a faster rate than pentagonal ones, which in turn increase
     * faster than triangle numbers, we know that if t_a = p_b = h_c, then a > b > c for a, b, c > 1. With this in
     * mind, first store all generated hexagonal values in a HashSet for quick access. Then, check each generated
     * pentagonal value to see if it is also hexagonal by checking against the hashset; if the number is found, store
     * the pentagonal/hexagonal value in another HashSet. Finally, check each generated triangle number against the
     * second HashSet. If the triangle number is found and the solution is not 40755 (the first tri-penta-hex number),
     * the solution is found. 1 is an additional solution and is skipped as a result.
     *
     * @return solution to Problem 45
     */
    public String solve() {
        HashSet<Long> hexNums = new HashSet(), hexPenNums = new HashSet();

        long solution = 0, tri = 0, pen = 0, hex = 0;
        for (long i = 1; solution < 2; i++) {
            tri = Utility.getTriangleNumber(i);
            pen = Utility.getPentagonalNumber(i);
            hex = Utility.getHexagonalNumber(i);

            hexNums.add(hex);
            if (hexNums.contains(pen)) {
                hexPenNums.add(pen);
            }
            if (hexPenNums.contains(tri) && tri != INVALID_ANSWER) {
                solution = tri;
            }

        }
        return solution + "";
    }
}
