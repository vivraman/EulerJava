package eulerjava;

/* Problem X: Highly divisible triangular number
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.

 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Euler012 {

    int[] primes;
    int primeNum;

    public Euler012() {
        long time = System.currentTimeMillis();
        System.out.println("The answer is: " + solve());
        System.out.println("Time Elapsed: " + (System.currentTimeMillis() - time) + "ms");
    }

    private int solve() {
        primes = new int[500];
        primes[0] = 2;
        primeNum = 1;
        int answer = 3;
        while (primeNum < 500) {
            boolean isPrime = true;
            int limit = (int) (Math.sqrt(answer));
            for (int j = 0; j < primeNum; j++) {
                if (primes[j] > limit) {
                    break;
                }
                if (answer % primes[j] == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                primes[primeNum++] = answer;
            }
            answer += 2;
        }
        int current = 5;
        while (true) {
            if (current % 2 == 0) {
                if (primeFactorNum(current / 2) * primeFactorNum(current + 1) > 500) {
                    return (current * (current + 1)) / 2;
                }
            } else {
                if (primeFactorNum(current) * primeFactorNum((current + 1) / 2) > 500) {
                    return (current * (current + 1)) / 2;
                }
            }
            ++current;
        }
    }

    private int primeFactorNum(int answer) {
        int current = answer, factNum = 1, tempfact = 0, limit = answer / 2;
        for (int i = 0; i < primeNum; i++) {
            if (primes[i] > limit) {
                break;
            }
            tempfact = 1;
            while (current % primes[i] == 0) {
                tempfact++;
                current /= primes[i];
            }
            if (tempfact > 0) {
                factNum *= tempfact;
            }
        }
        return factNum;
    }
}
